# Load project's shell environment variables
import os
import sys
from dotenv import load_dotenv
load_dotenv(dotenv_path="../project.env")
sys.path.append(os.environ["PYTHONPATH"])

# Load project-wide variables
import superheader as sup

###############################################################################
################################## Filesystem #################################

import os

# Directory where the extracted data from PH1 lives
PH1_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH1', sup.NUM_CLASSES)
PH1_DATA_PERFRAME_CSV = os.path.join(PH1_DATA_ROOT, 'perframe.csv')
PH1_DATA_ACTIVE_CSV = os.path.join(PH1_DATA_ROOT, 'active.csv')
PH1_DATA_PERVIDEO_CSV = os.path.join(PH1_DATA_ROOT, 'pervideo.csv')

NUM_FRAMES_PER_VIDEO = 2*sup.NUM_FRAMES_EXTRACTED_PER_VIDEO_HALF

if os.path.exists(PH1_DATA_ROOT)==False:
  raise Exception(f"Directory {PH1_DATA_ROOT} does not exist. Please investigate") 
else:
  print(f"Directory {PH1_DATA_ROOT} exists. Continuing with execution")

# Directory where the data generated by PH2 will live
PH2_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH2', sup.NUM_CLASSES)
PH2_DATA_PERFRAME_CSV = os.path.join(PH2_DATA_ROOT, 'perframe.csv')
PH2_DATA_ACTIVE_CSV = os.path.join(PH2_DATA_ROOT, 'active.csv')
PH2_DATA_PERVIDEO_CSV = os.path.join(PH2_DATA_ROOT, 'pervideo.csv')

if os.path.exists(PH2_DATA_ROOT)==False:
  print(f"Directory {PH2_DATA_ROOT} does not exist. Creating it and continuing with execution")
  os.makedirs(PH2_DATA_ROOT)
else:
  print(f"Directory {PH2_DATA_ROOT} exists. Continuing with execution")

################################## Filesystem #################################
###############################################################################
################################ Column naming ################################

## Applicable to both per frame and per video datasets
tag_columns = ["person_id", "cycle_num", "handedness", "class_name", "class_numeric"]
handedness_column = ["handedness"]

## Applicable only to per frame datasets
fileid_col = ["fileid"]
current_frame_col = ["current_frame"]
active_hand_col = ["active_hand"]

#/ Original landmarks
##/ Original hand landmarks
pf_hand_landmark_columns = []
for i in range(21):
  pf_hand_landmark_columns.append('h'+str(i)+'x')
  pf_hand_landmark_columns.append('h'+str(i)+'y')
  pf_hand_landmark_columns.append('h'+str(i)+'z')

##/ Original pose landmarks
pf_pose_landmark_columns = []
for i in [0, 11, 12]:
  pf_pose_landmark_columns.append('p'+str(i)+'x')
  pf_pose_landmark_columns.append('p'+str(i)+'y')
  pf_pose_landmark_columns.append('p'+str(i)+'z')

#/ Mean position landmarks
##/ Mean hand position landmarks
pf_mean_hand_columns = ["h_mean_x", "h_mean_y", "h_mean_z"]

#/ v1, v2, v3 vectors
#/ palm v1, v2, v3 vectors
pf_h_v123_columns = ["h_v1x", "h_v1y", "h_v1z"]+["h_v2x", "h_v2y", "h_v2z"]+["h_v3x", "h_v3y", "h_v3z"]
#/ chest v1, v2, v3 vectors
pf_p_v123_columns = ["p_v1x", "p_v1y", "p_v1z"]+["p_v2x", "p_v2y", "p_v2z"]+["p_v3x", "p_v3y", "p_v3z"]

#/ Rebased landmarks
##/ Rebased hand landmarks
pf_wrist_hand_landmark_columns = []
for i in range(21):
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'x')
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'y')
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'z')

##/ Rebased pose landmarks
pf_chest_pose_landmark_columns = []
for i in [0, 11, 12]:
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'x')
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'y')
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'z')
pf_chest_pose_landmark_columns.append('cp_h_mean_x')
pf_chest_pose_landmark_columns.append('cp_h_mean_y')
pf_chest_pose_landmark_columns.append('cp_h_mean_z')


## Applicable only to per video dataset
pv_hand_landmark_columns = []
pv_pose_landmark_columns = []
pv_mean_hand_columns = []
pv_h_v123_columns = []
pv_p_v123_columns = []
pv_wrist_hand_landmark_columns = []
pv_chest_pose_landmark_columns = []


for k in range(sup.NUM_FRAMES_PER_VIDEO):
  #/ Original landmarks
  ##/ Original hand landmarks
  for i in range(21):
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'x')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'y')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'z')

  ##/ Original pose landmarks
  for i in [0, 11, 12]:
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'x')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'y')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'z')

  ##/ Mean position landmarks
  ##/ Mean hand position landmarks
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_x')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_y')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_z')

  #/ v1, v2, v3 vectors
  for i in [1, 2, 3]:
    ##/ hand v1, v2, v3 vectors
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'x')
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'y')
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'z')

    ##/ pose v1, v2, v3 vectors
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'x')
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'y')
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'z')

  #/ Rebased landmarks
  ##/ Rebased hand landmarks
  for i in range(21):
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'x')
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'y')
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'z')

  ##/ Rebased pose landmarks
  for i in [0, 11, 12]:
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'x')
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'y')
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'z')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_x')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_y')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_z')

################################ Column naming ################################
###############################################################################
############################ Feature transformation ###########################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #

from feature_transformations.CenterOfGravity import CenterOfGravity
from feature_transformations.NormalVector import NormalVector, get_middlepoint_coordinates, v3_handedness
from feature_transformations.ChangeOfBase import ChangeOfBase

import feature_transformations.hand.handheader as hand
import feature_transformations.pose.poseheader as pose

# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
############################ Feature transformation ###########################
###############################################################################