# Load project's shell environment variables
import os
import sys
from dotenv import load_dotenv
load_dotenv(dotenv_path="../project.env")
sys.path.append(os.environ["PYTHONPATH"])

# Load project-wide variables
import superheader as sup

###############################################################################
################################## Filesystem #################################

import os

# Directory where the extracted data from PH1 lives
PH1_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH1', sup.NUM_CLASSES)
PH1_DATA_PERFRAME_CSV = os.path.join(PH1_DATA_ROOT, 'perframe.csv')
PH1_DATA_ACTIVE_CSV = os.path.join(PH1_DATA_ROOT, 'active.csv')
PH1_DATA_PERVIDEO_CSV = os.path.join(PH1_DATA_ROOT, 'pervideo.csv')

NUM_FRAMES_PER_VIDEO = 2*sup.NUM_FRAMES_EXTRACTED_PER_VIDEO_HALF

if os.path.exists(PH1_DATA_ROOT)==False:
  raise Exception(f"Directory {PH1_DATA_ROOT} does not exist. Please investigate") 
else:
  print(f"Directory {PH1_DATA_ROOT} exists. Continuing with execution")

# Directory where the data generated by PH2 will live
PH2_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH2', sup.NUM_CLASSES)

if os.path.exists(PH2_DATA_ROOT)==False:
  print(f"Directory {PH2_DATA_ROOT} does not exist. Creating it and continuing with execution")
  os.makedirs(PH2_DATA_ROOT)
else:
  print(f"Directory {PH2_DATA_ROOT} exists. Continuing with execution")

# Column naming
## Applicable to both per frame and per video datasets
tag_columns = ["person_id", "cycle_num", "handedness", "class_name", "class_numeric"]
handedness_column = ["handedness"]

## Applicable only to per frame datasets
fileid_col = ["fileid"]
current_frame_col = ["current_frame"]
active_hand_col = ["active_hand"]

#/ Original landmarks
##/ Original hand landmarks
pf_hand_landmark_columns = []
for i in range(21):
  pf_hand_landmark_columns.append('h'+str(i)+'x')
  pf_hand_landmark_columns.append('h'+str(i)+'y')
  pf_hand_landmark_columns.append('h'+str(i)+'z')

##/ Original pose landmarks
pf_pose_landmark_columns = []
for i in [0, 11, 12]:
  pf_pose_landmark_columns.append('p'+str(i)+'x')
  pf_pose_landmark_columns.append('p'+str(i)+'y')
  pf_pose_landmark_columns.append('p'+str(i)+'z')

#/ Mean hand position landmarks
pf_mean_hand_columns = ["h_mean_x", "h_mean_y", "h_mean_z"]

#/ v1, v2, v3 landmarks
pf_v123_columns = ["v1x", "v1y", "v1z"]+["v2x", "v2y", "v2z"]+["v3x", "v3y", "v3z"]

## Applicable only to per video dataset
pv_hand_landmark_columns = []
pv_pose_landmark_columns = []
pv_mean_hand_columns = []
pv_v123_columns = []


for k in range(sup.NUM_FRAMES_PER_VIDEO):
  #/ Original landmarks
  ##/ Original hand landmarks
  for i in range(21):
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'x')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'y')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'z')

  ##/ Original pose landmarks
  for i in [0, 11, 12]:
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'x')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'y')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'z')

  #/ Mean hand position landmarks
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_x')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_y')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_z')

  #/ v1, v2, v3 landmarks
  for i in [1, 2, 3]:
    pv_v123_columns.append('f'+str(k)+'_v'+str(i)+'x')
    pv_v123_columns.append('f'+str(k)+'_v'+str(i)+'y')
    pv_v123_columns.append('f'+str(k)+'_v'+str(i)+'z')



################################## Filesystem #################################
###############################################################################
############################ Feature transformation ###########################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #

import feature_transformations.hand.handheader as hand

# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
############################ Feature transformation ###########################
###############################################################################