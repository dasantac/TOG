# Load project's shell environment variables
import os
import sys
from dotenv import load_dotenv
load_dotenv(dotenv_path="../project.env")
sys.path.append(os.environ["PYTHONPATH"])

# Load project-wide variables
import superheader as sup

###############################################################################
################################## Filesystem #################################

import os

# Directory where the extracted data from PH1 lives
PH1_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH1', sup.NUM_CLASSES)
PH1_DATA_PERFRAME_CSV = os.path.join(PH1_DATA_ROOT, 'perframe.csv')
PH1_DATA_ACTIVE_CSV = os.path.join(PH1_DATA_ROOT, 'active.csv')
PH1_DATA_PERVIDEO_CSV = os.path.join(PH1_DATA_ROOT, 'pervideo.csv')

NUM_FRAMES_PER_VIDEO = 2*sup.NUM_FRAMES_EXTRACTED_PER_VIDEO_HALF

if os.path.exists(PH1_DATA_ROOT)==False:
  raise Exception(f"Directory {PH1_DATA_ROOT} does not exist. Please investigate") 
else:
  print(f"Directory {PH1_DATA_ROOT} exists. Continuing with execution")

# Directory where the data generated by PH2 will live
PH2_DATA_ROOT = os.path.join(sup.DATA_ROOT, 'PH2', sup.NUM_CLASSES)

if os.path.exists(PH2_DATA_ROOT)==False:
  print(f"Directory {PH2_DATA_ROOT} does not exist. Creating it and continuing with execution")
  os.makedirs(PH2_DATA_ROOT)
else:
  print(f"Directory {PH2_DATA_ROOT} exists. Continuing with execution")

# Column naming
## Applicable to both per frame and per video datasets
video_tag_columns = ["person_id", "cycle_num", "handedness", "class_name", "class_numeric"]

## Applicable only to per frame datasets
fileid_col = ["fileid"]
current_frame_col = ["current_frame"]
active_hand_col = ["active_hand"]

frame_hand_landmark_columns = []
for i in range(21):
  frame_hand_landmark_columns.append('h'+str(i)+'x')
  frame_hand_landmark_columns.append('h'+str(i)+'y')
  frame_hand_landmark_columns.append('h'+str(i)+'z')

frame_pose_landmark_columns = []
for i in [0, 11, 12]:
  frame_pose_landmark_columns.append('p'+str(i)+'x')
  frame_pose_landmark_columns.append('p'+str(i)+'y')
  frame_pose_landmark_columns.append('p'+str(i)+'z')

## Applicable only to per video dataset
video_landmark_columns = []
video_hand_landmark_columns = []
video_pose_landmark_columns = []


for k in range(sup.NUM_FRAMES_PER_VIDEO):
  for i in range(21):
    video_landmark_columns.append('f'+str(k)+'_h'+str(i)+'x')
    video_landmark_columns.append('f'+str(k)+'_h'+str(i)+'y')
    video_landmark_columns.append('f'+str(k)+'_h'+str(i)+'z')

    video_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'x')
    video_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'y')
    video_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'z')

  for i in [0, 11, 12]:
    video_landmark_columns.append('f'+str(k)+'_p'+str(i)+'x')
    video_landmark_columns.append('f'+str(k)+'_p'+str(i)+'y')
    video_landmark_columns.append('f'+str(k)+'_p'+str(i)+'z')

    video_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'x')
    video_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'y')
    video_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'z')

################################## Filesystem #################################
###############################################################################
############################ Feature transformation ###########################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #

import feature_transformations.hand.handheader as hand

# # # # # # # # # # # # # Step 1: Hand transformations  # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
############################ Feature transformation ###########################
###############################################################################