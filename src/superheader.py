# Load project's shell environment variables
import os
import sys
from dotenv import load_dotenv
load_dotenv(dotenv_path="../project.env")
sys.path.append(os.environ["PYTHONPATH"])

###############################################################################
################################### Classes ###################################

#NUM_CLASSES = "all-classes"
NUM_CLASSES = "two-classes"
if NUM_CLASSES == "all-classes":
  big_classes = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'll', 'm', 'n', 'Ã±', 'o', 'p', 'q', 'r', 'rr', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
  small_classes = ['0']
  CLASSES_LIST = big_classes + small_classes
elif NUM_CLASSES == "two-classes":
  CLASSES_LIST = ['a', 'b']

CLASSES_TO_NUMBERS = {CLASSES_LIST[i] : i for i in range(len(CLASSES_LIST))}
NUMBERS_TO_CLASSES = {i : CLASSES_LIST[i] for i in range(len(CLASSES_LIST))}

################################### Classes ###################################
###############################################################################
############################### Hyperparameters ###############################

# PH1
NUM_FRAMES_EXTRACTED_PER_VIDEO_HALF = 6
NUM_FRAMES_PER_VIDEO = 2*NUM_FRAMES_EXTRACTED_PER_VIDEO_HALF

# PH3
PH3_N_CANDIDATES = [1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 18, 21, 24, 30]

############################### Hyperparameters ###############################
###############################################################################
################################## Filesystem #################################

def report_dir_if_not_exists(path):
  if os.path.exists(path)==False:
    raise Exception(f"Directory {path} does not exist. Please investigate") 
  else:
    print(f"Directory {path} exists. Continuing with execution")

def create_dir_if_not_exists(path):
  if os.path.exists(path)==False:
    print(f"Directory {path} does not exist. Creating it and continuing with execution")
    os.makedirs(path)
  else:
    print(f"Directory {path} exists. Continuing with execution")

# Top directory for the project
ROOT = os.environ["TOG_ROOT"]
report_dir_if_not_exists(ROOT)

# Directory where all the data used by and created by the project lives
DATA_ROOT = os.path.join(ROOT, 'data')
report_dir_if_not_exists(DATA_ROOT)

# Directory where all the code used for the project lives
CODE_ROOT = os.path.join(ROOT, 'src')
report_dir_if_not_exists(CODE_ROOT)

# Directory where all the binaries used by and created by the project live
BIN_ROOT = os.path.join(ROOT, 'bin')
report_dir_if_not_exists(BIN_ROOT)

# Directory where all the media used by and created by the project live
MEDIA_ROOT = os.path.join(ROOT, 'media')
report_dir_if_not_exists(MEDIA_ROOT)

# Directory where the raw videos live
RAW_DATA_ROOT = os.path.join(DATA_ROOT, 'raw', NUM_CLASSES)

# Directory where the extracted data from PH1 lives
PH1_DATA_ROOT = os.path.join(DATA_ROOT, 'PH1', NUM_CLASSES)
PH1_DATA_PERFRAME_CSV = os.path.join(PH1_DATA_ROOT, 'perframe.csv')
PH1_DATA_PERVIDEO_CSV = os.path.join(PH1_DATA_ROOT, 'pervideo.csv')

# Directory where the data generated by PH2 lives
PH2_DATA_ROOT = os.path.join(DATA_ROOT, 'PH2', NUM_CLASSES)
PH2_DATA_PERFRAME_CSV = os.path.join(PH2_DATA_ROOT, 'perframe.csv')
PH2_DATA_PERVIDEO_CSV = os.path.join(PH2_DATA_ROOT, 'pervideo.csv')

# Directory where the data generated by PH3 will live
PH3_DATA_ROOT = os.path.join(DATA_ROOT, 'PH3', NUM_CLASSES)
# Directory where the binaries generated by PH3 will live
PH3_BINGEN_ROOT = os.path.join(BIN_ROOT, 'gen', 'PH3')
# Directory where the media generated by PH3 will live
PH3_MEDIAGEN_ROOT = os.path.join(MEDIA_ROOT, 'gen', 'PH3')
# Because in ph3 we generate different data/binaries depending on the 
# conbination of choices of whether or not we do the ph2 transformations,
# whether or not we reduce the data, if applicable what reducer we use, and if
# applicable what kernel we use for our reducer, we use the following codes
PH3_W2_CODE = 'w2'
PH3_WO2_CODE = 'wo2'
PH3_SUB_CODES = [PH3_W2_CODE, PH3_WO2_CODE]
PH3_SCALED_CODE = 'scale'
PH3_REDUCED_CODE = 'reduce'
PH3_SUB2_CODES = [PH3_SCALED_CODE, PH3_REDUCED_CODE]
PH3_REDUCER_NAME_PCA = 'pca'
PH3_REDUCER_NAME_KPCA = 'kpca'
PH3_REDUCER_NAME_UMAP = 'umap'
PH3_REDUCER_NAMES = [PH3_REDUCER_NAME_PCA,
                     PH3_REDUCER_NAME_KPCA,
                     PH3_REDUCER_NAME_UMAP]
PH3_REDUCER_KERNEL_NAME_POLY = 'poly'
PH3_REDUCER_KERNEL_NAME_RBF = 'rbf'
PH3_REDUCER_KERNEL_NAME_SIG = 'sigmoid'
PH3_REDUCER_KERNEL_NAME_COS = 'cosine'
PH3_REDUCER_KERNEL_NAMES = [PH3_REDUCER_KERNEL_NAME_POLY,
                            PH3_REDUCER_KERNEL_NAME_RBF,
                            PH3_REDUCER_KERNEL_NAME_SIG,
                            PH3_REDUCER_KERNEL_NAME_COS]

################################## Filesystem #################################
###############################################################################
################################ Column naming ################################

## Applicable to both per frame and per video datasets
tag_columns = ["person_id", "cycle_num", "handedness", "class_name", "class_numeric"]
class_name_column = "class_name"
class_numeric_column = "class_numeric"
handedness_column = "handedness"

## Applicable only to per frame datasets
fileid_col = "fileid"
frame_count_col = "frame_count"
current_frame_col = "current_frame"
active_hand_col = "active_hand"

#/ Original landmarks
##/ Original hand landmarks
pf_hand_landmark_columns = []
for i in range(21):
  pf_hand_landmark_columns.append('h'+str(i)+'x')
  pf_hand_landmark_columns.append('h'+str(i)+'y')
  pf_hand_landmark_columns.append('h'+str(i)+'z')

##/ Original pose landmarks
pf_pose_landmark_columns = []
for i in [0, 11, 12]:
  pf_pose_landmark_columns.append('p'+str(i)+'x')
  pf_pose_landmark_columns.append('p'+str(i)+'y')
  pf_pose_landmark_columns.append('p'+str(i)+'z')

#/ Mean position landmarks
##/ Mean hand position landmarks
pf_mean_hand_columns = ["h_mean_x", "h_mean_y", "h_mean_z"]

#/ v1, v2, v3 vectors
#/ palm v1, v2, v3 vectors
pf_h_v123_columns = ["h_v1x", "h_v1y", "h_v1z"]+["h_v2x", "h_v2y", "h_v2z"]+["h_v3x", "h_v3y", "h_v3z"]
#/ chest v1, v2, v3 vectors
pf_p_v123_columns = ["p_v1x", "p_v1y", "p_v1z"]+["p_v2x", "p_v2y", "p_v2z"]+["p_v3x", "p_v3y", "p_v3z"]

#/ Rebased landmarks
##/ Rebased hand landmarks
pf_wrist_hand_landmark_columns = []
for i in range(21):
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'x')
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'y')
  pf_wrist_hand_landmark_columns.append('wh'+str(i)+'z')

##/ Rebased pose landmarks
pf_chest_pose_landmark_columns = []
for i in [0, 11, 12]:
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'x')
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'y')
  pf_chest_pose_landmark_columns.append('cp'+str(i)+'z')
pf_chest_pose_landmark_columns.append('cp_h_mean_x')
pf_chest_pose_landmark_columns.append('cp_h_mean_y')
pf_chest_pose_landmark_columns.append('cp_h_mean_z')


## Applicable only to per video dataset
pv_hand_landmark_columns = []
pv_pose_landmark_columns = []
pv_mean_hand_columns = []
pv_h_v123_columns = []
pv_p_v123_columns = []
pv_wrist_hand_landmark_columns = []
pv_chest_pose_landmark_columns = []


for k in range(NUM_FRAMES_PER_VIDEO):
  #/ Original landmarks
  ##/ Original hand landmarks
  for i in range(21):
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'x')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'y')
    pv_hand_landmark_columns.append('f'+str(k)+'_h'+str(i)+'z')

  ##/ Original pose landmarks
  for i in [0, 11, 12]:
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'x')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'y')
    pv_pose_landmark_columns.append('f'+str(k)+'_p'+str(i)+'z')

  ##/ Mean position landmarks
  ##/ Mean hand position landmarks
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_x')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_y')
  pv_mean_hand_columns.append('f'+str(k)+'_h_mean_z')

  #/ v1, v2, v3 vectors
  for i in [1, 2, 3]:
    ##/ hand v1, v2, v3 vectors
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'x')
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'y')
    pv_h_v123_columns.append('f'+str(k)+'_h_v'+str(i)+'z')

    ##/ pose v1, v2, v3 vectors
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'x')
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'y')
    pv_p_v123_columns.append('f'+str(k)+'_p_v'+str(i)+'z')

  #/ Rebased landmarks
  ##/ Rebased hand landmarks
  for i in range(21):
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'x')
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'y')
    pv_wrist_hand_landmark_columns.append('f'+str(k)+'_wh'+str(i)+'z')

  ##/ Rebased pose landmarks
  for i in [0, 11, 12]:
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'x')
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'y')
    pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp'+str(i)+'z')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_x')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_y')
  pv_chest_pose_landmark_columns.append('f'+str(k)+'_cp_h_mean_z')

################################ Column naming ################################
###############################################################################